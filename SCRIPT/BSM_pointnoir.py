# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# scriptonthego.py
# Created on: 2017-11-22 15:11:29.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
# Import datetime module
import datetime

# Local variables:
vugis_point = "VUGIS2GDB"
vugis_copy = 'vugis_copy'
database = "C:\\Users\\ChardonnensB01\\Documents\\ArcGIS\\Default.gdb"
field_to_compute = ['TUES','BLESSES_GRAVES','BLESSES_LEGERS']
field_query_buffer = ['LOCALITE','GENRE_ROUTE']
lower_date = datetime.datetime(2014, 6, 30, 0, 0, 0)


# Workspace definition

arcpy.env.workspace = database

# OverWrite settings

arcpy.env.overwriteOutput = True

# Process: Copy Features
arcpy.CopyFeatures_management(vugis_point, vugis_copy)

# Row Killer (if date < lower_date)
with arcpy.da.UpdateCursor(vugis_copy, "DATE") as cursor:
    for row in cursor:
        if row[0] < lower_date:
            cursor.deleteRow()

# Process: Calculate Field
for field in field_to_compute:
    arcpy.CalculateField_management(vugis_copy, field, "calc(!"+field+"!)", "PYTHON", "def calc(field):\\n   if field > 0:\\n      return 1\\n   else:\\n      return 0")

# Lower capping
with arcpy.da.UpdateCursor(vugis_copy, field_query_buffer) as cursor:
    for row in cursor:
        row[0] = row[0].lower()
        row[1] = row[1].lower()
        cursor.updateRow(row)

# Buffering, 3 layer are created accordind to the SN 641 724's no

SQL = ["GENRE_ROUTE in ('autoroute', 'semi-autoroute')","GENRE_ROUTE NOT IN ('autoroute', 'semi-autoroute') AND LOCALITE IN ('a l''extérieur d''une localité', 'à l''extérieur d''une localité')","GENRE_ROUTE NOT IN ('autoroute', 'semi-autoroute') AND LOCALITE IN ( 'a l''intérieur d''une localité' , 'à l''intérieur d''une localité' )"]
arcpy.Select_analysis(vugis_copy, "in_memory\selection", SQL[0])
arcpy.Buffer_analysis("in_memory\selection","in_memory\\buffer250",250)

arcpy.Select_analysis(vugis_copy, "in_memory\selection", SQL[1])
arcpy.Buffer_analysis("in_memory\selection","in_memory\\buffer150",150)

arcpy.Select_analysis(vugis_copy, "in_memory\selection", SQL[2])
arcpy.Buffer_analysis("in_memory\selection","in_memory\\buffer50",50)

# Add Field BSM_INDICE, the sum of thoses INDICE will give us the LIMIT value
arcpy.AddField_management(vugis_copy,'BSM_INDICE','float')

# Calculate BSM_INDICE
field = ['TUES','BLESSES_GRAVES','BLESSES_LEGERS','BSM_INDICE']
with arcpy.da.UpdateCursor(vugis_copy, field) as cursor:
    for row in cursor:
        if   row[0] > 0:
            row[3] = 2
        elif row[1] > 0:
            row[3] = 2
        elif row[2] > 0:
            row[3] = 1
        else:
            row[3] = 0

        cursor.updateRow(row)



# Spatial join between the buffer and the vugis_point where BSM_INDICE is Summed.

# The list of feature which need a spatial join
fc = ['in_memory\\buffer250','in_memory\\buffer150','in_memory\\buffer50']

x = 0
for feature in fc:
    # Create the necessary FieldMap and FieldMappings objects

    fm1 = arcpy.FieldMap() # Le FieldMap de la couche en entré
    fm2 = arcpy.FieldMap() # Le fieldMap de la couche joint
    fms = arcpy.FieldMappings() # L'object FieldMapping

    ## NOTE A MOI-MEME, penser à recommender au Responsable R&D de chez ESRI
    ## de ne plus balancer du LSD dans le café des ingénieurs avant 17h.

    # Each field are added to the fieldmap fm1

    fm1.addInputField(feature,'GENRE_ROUTE')
    fm1.addInputField(feature,'NO_ACCIDENT')
    fm1.addInputField(feature,'LOCALITE')

    # Add the BSM_INDICE field to the second FieldMap object
    fm2.addInputField(vugis_copy, "BSM_INDICE")

    # Set the merge rule to find the Sum of all fields in the
    # FieldMap object fm2
    fm2.mergeRule = 'Sum'

    # Add both FieldMaps to the FieldMappings Object
    fms.addFieldMap(fm1)
    fms.addFieldMap(fm2)

    ## LOL mais LOL, ce bordel pour ça:
    arcpy.Select_analysis(vugis_copy, "in_memory\selection", SQL[x])
    arcpy.SpatialJoin_analysis(feature,"in_memory\selection",feature+'_joined','#','#',fms)
    x = x+1

# Merge

list_merged = [feature+'_joined' for feature in fc]
arcpy.Merge_management(list_merged, 'in_memory\\BSM')

# Feature to point

arcpy.FeatureToPoint_management('in_memory\\BSM', 'BSM')

